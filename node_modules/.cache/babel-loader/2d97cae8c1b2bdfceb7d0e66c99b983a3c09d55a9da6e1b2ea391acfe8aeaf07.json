{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\site4\\\\src\\\\SettingsContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SettingsContext = /*#__PURE__*/createContext();\nconst SettingsProvider = ({\n  children\n}) => {\n  _s();\n  // Определите структуру настроек пользователя\n  const [userSettings, setUserSettings] = useState({\n    theme: 'light',\n    language: 'en',\n    displayPreferences: 'standard'\n    // Другие параметры отображения...\n  });\n\n  // Создайте механизм для изменения настроек пользователя\n  const updateSettings = newSettings => {\n    setUserSettings(prevSettings => ({\n      ...prevSettings,\n      ...newSettings\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: {\n      userSettings,\n      updateSettings\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(SettingsProvider, \"/e9SPgp9sNE13XnYeQae18F0Aao=\");\n_c = SettingsProvider;\nexport { SettingsProvider, SettingsContext };\nvar _c;\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","SettingsContext","SettingsProvider","children","_s","userSettings","setUserSettings","theme","language","displayPreferences","updateSettings","newSettings","prevSettings","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/site4/src/SettingsContext.js"],"sourcesContent":["import React, { createContext, useState } from 'react';\r\n\r\nconst SettingsContext = createContext();\r\n\r\nconst SettingsProvider = ({ children }) => {\r\n  // Определите структуру настроек пользователя\r\n  const [userSettings, setUserSettings] = useState({\r\n    theme: 'light',\r\n    language: 'en',\r\n    displayPreferences: 'standard',\r\n    // Другие параметры отображения...\r\n  });\r\n\r\n  // Создайте механизм для изменения настроек пользователя\r\n  const updateSettings = (newSettings) => {\r\n    setUserSettings((prevSettings) => ({ ...prevSettings, ...newSettings }));\r\n  };\r\n\r\n  return (\r\n    <SettingsContext.Provider value={{ userSettings, updateSettings }}>\r\n      {children}\r\n    </SettingsContext.Provider>\r\n  );\r\n};\r\n\r\nexport { SettingsProvider, SettingsContext };"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,eAAe,gBAAGJ,aAAa,CAAC,CAAC;AAEvC,MAAMK,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACzC;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC;IAC/CS,KAAK,EAAE,OAAO;IACdC,QAAQ,EAAE,IAAI;IACdC,kBAAkB,EAAE;IACpB;EACF,CAAC,CAAC;;EAEF;EACA,MAAMC,cAAc,GAAIC,WAAW,IAAK;IACtCL,eAAe,CAAEM,YAAY,KAAM;MAAE,GAAGA,YAAY;MAAE,GAAGD;IAAY,CAAC,CAAC,CAAC;EAC1E,CAAC;EAED,oBACEX,OAAA,CAACC,eAAe,CAACY,QAAQ;IAACC,KAAK,EAAE;MAAET,YAAY;MAAEK;IAAe,CAAE;IAAAP,QAAA,EAC/DA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACd,EAAA,CAnBIF,gBAAgB;AAAAiB,EAAA,GAAhBjB,gBAAgB;AAqBtB,SAASA,gBAAgB,EAAED,eAAe;AAAG,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}